** Here we focus on 2nd chapter of the Pro Git Book -- branching

git branch
    - git branch fixing_bug
        // only creates the branch, does not switch to it
    - creating branch basically creates a pointer which points
      to certain place.
    - every branch has the HEAD pointer.

swithcing branches
    - git checkout new_branch
        // this moves the HEAD pointer from master to new_branch
    - git switch does the same

git log
    - this shows only log from the current branch you're on!
    - git log --oneline --decorate --graph --all

create and switch to new branch
    - git checkout -b branchname
    - git switch -c branchname // equal to above

IMPORTANT: cherry pick!
    - in order to get only one file updates from the other branch...
    - git checkout the_other_branch the_path_to_file_i_want
    - then later commit it and viola!

delete
    - git branch -d hotfix

synchroniznig branches  
    - if master is different than your current branch, you can:
    1. merge master in your branch // download latest changes
    2. or pull in hotfix branch to your master later.
    master: merge hotfix
    branch -d hotfix

merge conflicts
    - if conflict, merge is abandoned. fix conflict
    - first file from working branch, <<<<<<<<<<
    - delimeter: =========
    - other branch >>>>>>>>>>>
    - after fixed, put git add! STAGING MARKS CONFLICT RESOLVED.
    - then git commit to complete

    - graphical: git mergetool

check latest commit on each branch:
    - git branch -v
    
delete branch:
    - git branch -d localBranchName
    - git push origin --delete remoteBranchName

check which branches were merged already to master
    - git branch --merged // if merged, perhaps not needed anymore
    - git branch --unmerged // similar
    
rename
    - git branch --move old_branch_name new_fancy_branch

create remote branch
    - git push origin localBranchName:RemoteBranchName
    - git push --set-upstream origin new_fancy_branch //???


remote branches = adding repository
    - git add remote another_www_source git.www.https.online.com

git fetch origin
    - this checks and puts the pointer to the latest from remote master
    - and syncronize your work with remote, moving origin/master pointer to new

FETCH idea !
    - It’s important to note that when you do a fetch that brings down
      new remote-tracking branches, you don’t automatically have local, 
      editable copies of them. In other words, in this case, you don’t 
      have a new serverfix branch — you have only an origin/serverfix 
      pointer that you can’t modify.

    - To merge this work to current working branch, run git merge origin/serverfix. 

create a new local branch and fetch from some online repo:
    - git checkout -b ProntoFix origin/remoteBranchNo2

tracking branches
    - git checkout -b mb origin/mainbranch
        // create mb locally and connect to mainbranch on remote
    - git branch -u origin/serverfix   
        // if i already have some cloned repo or my code, use this to connect
        // this shows the upstream to remote branch
        // shortcut from --set-upstream-to

B)
1. create local branch repo
2. create remote branch repo with different name 
3. connect these and push changes // ?!
4. check to which remote branch your local is connected to.
5. remove local
6. remove remote

git checkout -b B
git push origin B:REMOTE_B // full branch
git branch --set-upstream-to origin/REMOTE_B
git branch -vv
git branch -d B
git push origin --delete REMOTE_B

track some other remote branch
    - git checkout -b new_local_branch
    - git branch -u origin/master // track master from new_local.

!!! -u is shortcut to --set-upstream-to


create new branch locally and track remote one:
    - git checkout -b sf origin/smallfix

if you already have local branch and connect it:
    - git branch -u origin/smallfix

if adding new remote for tracking:
    - git remote add teamone git.abc.com

git clone and git checkout implicitly create the upstream for you!

git fetch vs git pull:
    - While the git fetch command will fetch all the changes on the
     server that you don’t have yet, it will not modify your working
     directory at all. It will simply get the data for you and
     let you merge it yourself. 

     - git pull: is a git fetch followed by git merge!
